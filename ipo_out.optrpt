Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: true
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: true

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/6=16.7%] stencil.c(13,34)
  -> EXTERN: (17,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (18,5) exit(int)
  -> INLINE (MANUAL): (23,12) atoi(const char *) (isz = 4) (sz = 11)
    -> EXTERN: /usr/include/stdlib.h:(286,16) strtol(const char *__restrict__, char **__restrict__, int)
  -> INLINE (MANUAL): (26,16) atoi(const char *) (isz = 4) (sz = 11)
    -> EXTERN: /usr/include/stdlib.h:(286,16) strtol(const char *__restrict__, char **__restrict__, int)
  -> EXTERN: (29,18) malloc(size_t)
  -> EXTERN: (30,22) malloc(size_t)
  -> INLINE: (33,3) init_image(const int, const int, float *, float *) (isz = 115) (sz = 126)
  -> INLINE: (36,16) wtime(void) (isz = 8) (sz = 13)
    -> EXTERN: (127,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (38,5) stencil(const int, const int, float *, float *) (isz = 113) (sz = 124)
  -> INLINE: (39,5) stencil(const int, const int, float *, float *) (isz = 113) (sz = 124)
  -> INLINE: (41,16) wtime(void) (isz = 8) (sz = 13)
    -> EXTERN: (127,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (45,3) printf(const char *__restrict__, ...)
  -> EXTERN: (46,3) printf(const char *__restrict__, ...)
  -> EXTERN: (47,3) printf(const char *__restrict__, ...)
  -> INLINE: (49,3) output_image(const char *, const int, const int, float *) (isz = 86) (sz = 97)
    -> EXTERN: (92,14) fopen(const char *__restrict__, const char *__restrict__)
    -> EXTERN: (94,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (95,5) exit(int)
    -> EXTERN: (99,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (115,7) fputc(int, FILE *)
    -> EXTERN: (120,3) fclose(FILE *)
  -> EXTERN: (50,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stencil.c(69,5) inlined into stencil.c(33,3)
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ stencil.c(69,5) ]

   LOOP BEGIN at stencil.c(68,3) inlined into stencil.c(33,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(68,3) inlined into stencil.c(33,3)
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(70,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(71,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.464
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 13 
      remark #15477: vector loop cost: 1.750 
      remark #15478: estimated potential speedup: 5.790 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(68,3) inlined into stencil.c(33,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(70,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(71,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.444
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(68,3) inlined into stencil.c(33,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(76,3) inlined into stencil.c(33,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 3 4 ) --> ( 1 2 4 3 ) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(77,5) inlined into stencil.c(33,3)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 3 ) --> ( 1 3 2 ) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stencil.c(78,7) inlined into stencil.c(33,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at stencil.c(79,9) inlined into stencil.c(33,3)
         <Predicate Optimized v1>
            remark #25422: Invariant Condition at line 80 hoisted out of this loop
            remark #15329: vectorization support: scatter was emulated for the variable image:  strided by non-constant value   [ stencil.c(81,11) ]
            remark #15305: vectorization support: vector length 16
            remark #15300: LOOP WAS VECTORIZED
            remark #15462: unmasked indexed (or gather) loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 6 
            remark #15477: vector loop cost: 2.430 
            remark #15478: estimated potential speedup: 2.320 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at stencil.c(79,9) inlined into stencil.c(33,3)
         <Remainder loop for vectorization, Predicate Optimized v1>
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 0.833
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at stencil.c(79,9) inlined into stencil.c(33,3)
         <Remainder loop for vectorization, Predicate Optimized v1>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(37,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(54,3) inlined into stencil.c(38,5)
      remark #25260: Invariant Condition eliminated(Proven False) at line 59
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(38,5)
      <Peeled loop for vectorization, Predicate Optimized v3>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 7
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(38,5)
      <Predicate Optimized v3>
         remark #25422: Invariant Condition at line 57 hoisted out of this loop
         remark #25422: Invariant Condition at line 58 hoisted out of this loop
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(56,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(56,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(57,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(57,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(57,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(58,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(58,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(58,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(60,21) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.397
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 5 
         remark #15450: unmasked unaligned unit stride loads: 5 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 89 
         remark #15477: vector loop cost: 7.870 
         remark #15478: estimated potential speedup: 7.940 
         remark #15488: --- end vector loop cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 7
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(38,5)
      <Remainder loop for vectorization, Predicate Optimized v3>
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(38,5)
      <Peeled loop for vectorization, Predicate Optimized v4>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 5
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(38,5)
      <Predicate Optimized v4>
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(56,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(56,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(57,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(57,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(57,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(60,21) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.440
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 4 
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 70 
         remark #15477: vector loop cost: 6.250 
         remark #15478: estimated potential speedup: 7.880 
         remark #15488: --- end vector loop cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 5
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(38,5)
      <Remainder loop for vectorization, Predicate Optimized v4>
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(38,5)
      <Peeled loop for vectorization, Predicate Optimized v5>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 5
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(38,5)
      <Predicate Optimized v5>
         remark #25422: Invariant Condition at line 58 hoisted out of this loop
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(56,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(56,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(58,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(58,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(58,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(60,21) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.440
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 4 
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 70 
         remark #15477: vector loop cost: 6.250 
         remark #15478: estimated potential speedup: 7.880 
         remark #15488: --- end vector loop cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 5
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(38,5)
      <Remainder loop for vectorization, Predicate Optimized v5>
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(38,5)
      <Peeled loop for vectorization, Predicate Optimized v6>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(38,5)
      <Predicate Optimized v6>
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(56,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(56,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(60,21) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.257
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 3 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 51 
         remark #15477: vector loop cost: 4.620 
         remark #15478: estimated potential speedup: 7.790 
         remark #15488: --- end vector loop cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 6
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(38,5)
      <Remainder loop for vectorization, Predicate Optimized v6>
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(56,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(56,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(60,21) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.760
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(38,5)
      <Remainder loop for vectorization, Predicate Optimized v6>
      LOOP END
   LOOP END

   LOOP BEGIN at stencil.c(54,3) inlined into stencil.c(39,5)
      remark #25260: Invariant Condition eliminated(Proven False) at line 59
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(39,5)
      <Peeled loop for vectorization, Predicate Optimized v3>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 7
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(39,5)
      <Predicate Optimized v3>
         remark #25422: Invariant Condition at line 57 hoisted out of this loop
         remark #25422: Invariant Condition at line 58 hoisted out of this loop
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(56,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(56,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(57,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(57,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(57,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(58,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(58,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(58,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(60,21) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.397
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 5 
         remark #15450: unmasked unaligned unit stride loads: 5 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 89 
         remark #15477: vector loop cost: 7.870 
         remark #15478: estimated potential speedup: 7.940 
         remark #15488: --- end vector loop cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 7
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(39,5)
      <Remainder loop for vectorization, Predicate Optimized v3>
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(39,5)
      <Peeled loop for vectorization, Predicate Optimized v4>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 5
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(39,5)
      <Predicate Optimized v4>
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(56,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(56,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(57,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(57,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(57,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(60,21) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.440
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 4 
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 70 
         remark #15477: vector loop cost: 6.250 
         remark #15478: estimated potential speedup: 7.880 
         remark #15488: --- end vector loop cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 5
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(39,5)
      <Remainder loop for vectorization, Predicate Optimized v4>
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(39,5)
      <Peeled loop for vectorization, Predicate Optimized v5>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 5
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(39,5)
      <Predicate Optimized v5>
         remark #25422: Invariant Condition at line 58 hoisted out of this loop
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(56,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(56,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(58,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(58,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(58,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(60,21) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.440
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 4 
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 70 
         remark #15477: vector loop cost: 6.250 
         remark #15478: estimated potential speedup: 7.880 
         remark #15488: --- end vector loop cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 5
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(39,5)
      <Remainder loop for vectorization, Predicate Optimized v5>
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(39,5)
      <Peeled loop for vectorization, Predicate Optimized v6>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(39,5)
      <Predicate Optimized v6>
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(56,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(56,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(60,21) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.257
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 3 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 51 
         remark #15477: vector loop cost: 4.620 
         remark #15478: estimated potential speedup: 7.790 
         remark #15488: --- end vector loop cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 6
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(39,5)
      <Remainder loop for vectorization, Predicate Optimized v6>
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(56,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(56,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(59,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,21) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(60,21) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.760
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
      LOOP END

      LOOP BEGIN at stencil.c(55,5) inlined into stencil.c(39,5)
      <Remainder loop for vectorization, Predicate Optimized v6>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(106,5) inlined into stencil.c(49,3)
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ stencil.c(106,5) ]

   LOOP BEGIN at stencil.c(105,3) inlined into stencil.c(49,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(105,3) inlined into stencil.c(49,3)
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(107,7) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 6.500
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 8.750 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(105,3) inlined into stencil.c(49,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(107,7) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 13.000
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(105,3) inlined into stencil.c(49,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(113,3) inlined into stencil.c(49,3)
   remark #25095: Loop Interchange not done due to: User Function Inside Loop Nest
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15382: vectorization support: call to function fputc(int, FILE *) cannot be vectorized   [ stencil.c(115,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) line 115 and call:fputc(int, FILE *) line 115
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) line 115 and call:fputc(int, FILE *) line 115

   LOOP BEGIN at stencil.c(114,5) inlined into stencil.c(49,3)
      remark #15527: loop was not vectorized: function call to fputc(int, FILE *) cannot be vectorized   [ stencil.c(115,7) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: stencil(const int, const int, float *, float *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stencil(const int, const int, float *, float *)) stencil.c(53,78)

===========================================================================

Begin optimization report for: output_image(const char *, const int, const int, float *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (output_image(const char *, const int, const int, float *)) stencil.c(89,85)

===========================================================================

Begin optimization report for: wtime(void)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (wtime(void)) stencil.c(125,20)

===========================================================================

Begin optimization report for: init_image(const int, const int, float *, float *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (init_image(const int, const int, float *, float *)) stencil.c(66,81)

===========================================================================

    Report from: Profile guided optimizations [pgo]



Profile feedback used a statically estimated profile for the following routines:

  File: stencil.c
        main(int, char **)(13)


  0 out of 1 routine(s) used training profile data for PGO feedback
  0 out of 1 routine(s) were unable to use training profile data for PGO feedback
  0 out of 1 routine(s) were unable to find training profile data for PGO feedback
  1 out of 1 routine(s) used a static estimate profile for PGO feedback



